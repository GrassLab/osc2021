#include "entry.h"

.macro handle_invalid_entry type
kernel_entry
mov	x0, #\type
mrs	x1, esr_el1
mrs	x2, elr_el1
bl	show_invalid_entry_message
b	err_hang
.endm

.macro	ventry	label
.align	7	// entry size is 0x80, .align will pad 0
b	\label
.endm

.macro	kernel_entry
sub	sp, sp, #S_FRAME_SIZE
stp	x0, x1, [sp, #16 * 0]
stp	x2, x3, [sp, #16 * 1]
stp	x4, x5, [sp, #16 * 2]
stp	x6, x7, [sp, #16 * 3]
stp	x8, x9, [sp, #16 * 4]
stp	x10, x11, [sp, #16 * 5]
stp	x12, x13, [sp, #16 * 6]
stp	x14, x15, [sp, #16 * 7]
stp	x16, x17, [sp, #16 * 8]
stp	x18, x19, [sp, #16 * 9]
stp	x20, x21, [sp, #16 * 10]
stp	x22, x23, [sp, #16 * 11]
stp	x24, x25, [sp, #16 * 12]
stp	x26, x27, [sp, #16 * 13]
stp	x28, x29, [sp, #16 * 14]
str	x30, [sp, #16 * 15] 
.endm

.macro	kernel_exit
ldp	x0, x1, [sp, #16 * 0]
ldp	x2, x3, [sp, #16 * 1]
ldp	x4, x5, [sp, #16 * 2]
ldp	x6, x7, [sp, #16 * 3]
ldp	x8, x9, [sp, #16 * 4]
ldp	x10, x11, [sp, #16 * 5]
ldp	x12, x13, [sp, #16 * 6]
ldp	x14, x15, [sp, #16 * 7]
ldp	x16, x17, [sp, #16 * 8]
ldp	x18, x19, [sp, #16 * 9]
ldp	x20, x21, [sp, #16 * 10]
ldp	x22, x23, [sp, #16 * 11]
ldp	x24, x25, [sp, #16 * 12]
ldp	x26, x27, [sp, #16 * 13]
ldp	x28, x29, [sp, #16 * 14]
ldr	x30, [sp, #16 * 15] 
add	sp, sp, #S_FRAME_SIZE
.endm

/*
 * Exception vectors.
 */
.align	11
.globl exception_vector_table 
exception_vector_table:
	// Current EL with SP0
	ventry	sync_invalid_el1t			// Synchronous EL1t
	ventry	irq_invalid_el1t			// IRQ EL1t
	ventry	fiq_invalid_el1t			// FIQ EL1t
	ventry	error_invalid_el1t			// Error EL1t

	// Current EL with SPx
	ventry	sync_exc_handler			// Synchronous EL1h
	ventry	irq_exc_handler				// IRQ EL1h
	ventry	fiq_invalid_el1h			// FIQ EL1h
	ventry	error_invalid_el1h			// Error EL1h

	// Lower EL using AArch64
	ventry	sync_exc_handler			// Synchronous 64-bit EL0
	ventry	irq_exc_handler				// IRQ 64-bit EL0
	ventry	fiq_invalid_el0_64			// FIQ 64-bit EL0
	ventry	error_invalid_el0_64		// Error 64-bit EL0

	// Lower EL using AArch32
	ventry	sync_invalid_el0_32			// Synchronous 32-bit EL0
	ventry	irq_invalid_el0_32			// IRQ 32-bit EL0
	ventry	fiq_invalid_el0_32			// FIQ 32-bit EL0
	ventry	error_invalid_el0_32		// Error 32-bit EL0

/* Invalid expcetion handler*/
sync_invalid_el1t:
	handle_invalid_entry  SYNC_INVALID_EL1t

irq_invalid_el1t:
	handle_invalid_entry  IRQ_INVALID_EL1t

fiq_invalid_el1t:
	handle_invalid_entry  FIQ_INVALID_EL1t

error_invalid_el1t:
	handle_invalid_entry  ERROR_INVALID_EL1t

sync_invalid_el1h:
	handle_invalid_entry  SYNC_INVALID_EL1h

fiq_invalid_el1h:
	handle_invalid_entry  FIQ_INVALID_EL1h

error_invalid_el1h:
	handle_invalid_entry  ERROR_INVALID_EL1h

sync_invalid_el0_64:
	handle_invalid_entry  SYNC_INVALID_EL0_64

irq_invalid_el0_64:
	handle_invalid_entry  IRQ_INVALID_EL0_64

fiq_invalid_el0_64:
	handle_invalid_entry  FIQ_INVALID_EL0_64

error_invalid_el0_64:
	handle_invalid_entry  ERROR_INVALID_EL0_64

sync_invalid_el0_32:
	handle_invalid_entry  SYNC_INVALID_EL0_32

irq_invalid_el0_32:
	handle_invalid_entry  IRQ_INVALID_EL0_32

fiq_invalid_el0_32:
	handle_invalid_entry  FIQ_INVALID_EL0_32

error_invalid_el0_32:
	handle_invalid_entry  ERROR_INVALID_EL0_32

/* Synchronous and IRQ handler */
sync_exc_handler:
	kernel_entry
	mrs	x0, spsr_el1
	mrs	x1, elr_el1
	mrs	x2, esr_el1 
	bl sync_exc_router
	kernel_exit

	
	/* TODO: should set EL1 in sper_el1? */
	// eret to EL1 and use loginal or to avoiding mask the original interrupt setting 
	// In EL1 it still can get EL0 timer interrupt
	mrs x0, spsr_el1
	mov x1, 5 
	orr x0, x0, x1
	msr spsr_el1, x0

	// return to shell
	ldr x0, =shell_start // return to shell
	msr elr_el1, x0
	eret

irq_exc_handler:
	kernel_entry
	bl  irq_exc_router
	kernel_exit
	eret

.globl enable_irq_persist
enable_irq_persist:
	mov x2, x30	// store return address
	bl enable_irq
	mov x30, x2

	mrs x0, spsr_el1
	mov x1, 0b01111111
	and x0, x0, x1
	msr spsr_el1, x0 // set irq bit enable
	ret

.globl disable_irq_persist
disable_irq_persist:
	mov x2, x30	// store return address
	bl disable_irq
	mov x30, x2

	mrs x0, spsr_el1
	mov x1, 0b10000000
	orr x0, x0, x1
	msr spsr_el1, x0 // set irq bit disable
	ret

.globl enable_irq
enable_irq:
	msr daifclr, #2 // enable irq to current processor state
	ret

.globl disable_irq
disable_irq:
	msr daifset, #2
	ret

.globl enable_interrupt
enable_interrupt:
	msr daifclr, 0xf
	ret

.globl disable_interrupt
disable_interrupt:
	msr daifset, 0xf
	ret

.globl err_hang
err_hang: b err_hang